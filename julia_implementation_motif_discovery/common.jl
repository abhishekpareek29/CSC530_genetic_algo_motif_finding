print("Common file resource included")

input_strings = [
    "AAAATTATTCTTCCTTCGCTTTGTTTTTAGACATAATGTTAAATTTATTTTGAAATTTAAAGCAACATAAAAGAACATGTGATTTTTCTACTTATTGAAAGAGAGAAAGGAAAAAAATATGAAACAGGGATGGAAAGAATCCTATGCCTGGTGAAGGTCAAGGGTTCTCATAACCTACAGAGAATTTGGGGTCAGCCTGTCCTATTGTATATTATGGCAAAGATAATCATCATCTCATTTGGGTCCATTTTCCTCTCCATCTCTGCTTAACTGAAGATCCCATGAGATATACTCACACTGAATCTAAATAGCCTATCTCAGGGCTTGAATCACATGTGGGCCACAGCAGGAATGGGAACATGGAATTTCTAAGTCCTATCTTACTTGTTATTGTTGCTATGTCTTTTTCTTAGTTTGCATCTGAGGCAACATCAGCTTTTTCAGACAGAATGGCTTTGGAATAGTAAAAAAGACACAGAAGCCCTAAAATATGTATGTATGTATATGTGTGTGTGCATGCGTGAGTACTTGTGTGTAAATTTTTCATTATCTATAGGTAAAAGCACACTTGGAATTAGCAATAGATGCAATTTGGGACTTAACTCTTTCAGTATGTCTTATTTCTAAGCAAAGTATTTAGTTTGGTTAGTAATTACTAAACACTGAGAACTAAATTGCAAACACCAAGAACTAAAATGTTCAAGTGGGAAATTACAGTTAAATACCATGGTAATGAATAAAAGGTACAAATCGTTTAAACTCTTATGTAAAATTTGATAAGATGTTTTACACAACTTTAATACATTGACAAGGTCTTGTGGAGAAAACAGTTCCAGATGGTAAATATACACAAGGGATTTAGTCAAACAATTTTTTGGCAAGAATATTATGAATTTTGTAATCGGTTGGCAGCCAATGAAATACAAAGATGAGTCTAGTTAATAATCTACAATTATTGGTTAAAGAAGTATATTAGTGCTAATTTCCCTCCGTTTGTCCT",
    "CAGCTTTGCGCCTCCACTGTCACCCTCAGGAATGTTCCACATACTCAGCGAGTATGCTTGGGGGGCAAAAGGGTGAAAGATACAAAAGCTTCTGATATCTATTTAACTGATTTCACCCAAATGCTTTGAACCTGGGAATGTACCTCTCCCCCTCCCCCACCCCCAACAGGAGTGAGACAAGGGCCAGGGCTATTGCCCCTGCTGACTCAATATTGGCTAATCACTGCCTAGAACTGATAAGGTGATCAAATGACCAGGTGCCTTCAACCTTTACCCTGGTAGAAGCCTCTTATTCACCTCTTTTCCTGCCAGAGCCCTCCATTGGGAGGGGACGGGCGGAAGCTGTTTTCTGAATTTGTTTTACTGGGGGTAGGGTATGTTCAGTGATCAGCATCCAGGTCATTCTGGGCTCTCCTGTTTTCTCCCCGTCTCATTACACATTAACTCAAAAACGGACAAGATCATTTACACTTGCCCTCTTACCCGACCCTCATTCCCCTAACCCCCATAGCCCTCAACCCTGTCCCTGATTTCAATTCCTTTCTCCTTTCTTCTGCTCCCCAATATCTCTCTGCCAAGTTGCAGTAAAGTGGGATAAGGTTGAGAGATGAGATCTACCCATAATGGAATAAAGACACCATGAGCTTTCCATGGTATGATGGGTTGATGGTATTCCATGGGTTGATATGTCAGAGCTTTCCAGAGAAATAACTTGGAATCCTGCTTCCTGTTGCACTCAAGTCCAAGGACCTCAGATCTCAAAAGAATGAACCTCAAATATACCTGAAGTGTACCCCCTTAGCCTCCACTAAGAGCTGTACCCCCTGCCTCTCACCCCATCACCATGAGTCTTCCATGTGCTTGTCCTCTCCTCCCCCATTTCTCCAACTTGTTTATCCTCACATAATCCCTGCCCCACTGGGCCCATCCATAGTCCCTGTCACCTGACAGGGGGTGGGTAAACAGACAGGTATATAGCCCCTTCCTCTCCAGCCAGGGC",
    "TTGACAGACAGTGTGGAGGGATTACTTGAATCTTGTGAATAGAGGAAAGAGTAGAATCAGATTATCCTGACTCCTGCCTGAAGCTTTACATATTCAGAGAAAAATGTTGGAAGAAACTTTGATATAATGCTATGTCTGTGATCAGGCACACATTTTACTGGACTTTTACTGTCAGGGCCGTCATTTAGTGCCAAGATGTCTAGAGAGTTCTTAATAAGTGTACTCAATTGGCTGAGAAAATGTGTCCATGCAAAAAACCAAACACCGCGTGTTCTCACTCATAGATGGGAATTGAACAATGAGAATACTTGGACACAGGAAGGGGAACATCACACTCTGGGGACTGTTGTGGGGTGGGGGGAGGGGGGAGGGATAGCATTAGAAGATATACCTAATGCTAAATGATGAGTTAATGGGTGCAGCACACCAGCATGGCACATGTATACATATGTAACTAACCTGCACATTGTGCACATGTACCCTAAAACTTAAAGTATAATAATAATAAAAAAATGTGTCCATGGCTCTGGGAGGAGCATGTTTGTTTTCCTCATTTCCCAGTCTGTAAATAAGCAAATTGAAAGGGGTTAGTGATAATGTCCATCTCCAGAAGCTGTCAGATTTCCTTTGTCAAACTCTATGATTTGGGCTGAAGTAGGTGTTGGAGAGGCAGCTACCACGTGCACCCAGATGGCCACTCGTTTAATATGTTACCATTTCCCATTATTTTCGCAGGATAGATAGCCAAAGTGGAGCCCTGAGAGATTTCTTCATTTTTCCTGTCATAAAGAATTGGTAATTCAGTAGTCATAGGAGTTTGTAATAAATAACTCACATTGATTTCTCTGTTCTGAAATAATTTTGCTTCCCCTCTTCCCGAAGCTCTGACACCTGCCCCAACAAGCAATGTTGGAAAATTATTTACATAGTGGCGCAAACTCCCTTACTGCTTTGGATATAAATCCAGGCAGGAGGAGGTAGCTCTAAGGCAAGAGATCTA",
    "ATACACGTACTACACATTGGACTCTTGGGTAGTCTCTAGGGCTGTAGCAAGGAGCCTTGCTCCCAAGGGACTCATTTACACAATCCTGTGAACGGACCAAGAGTAAACAGTGTGCTCAATGCTGTGCCTACGTGTGTTAGCCCACGCGGCCAGCCTGAGGAGTCAGGGAAGGCTCCCCTAGGCAAAGCCCCCAACCAGAATCAAGTCTTAATGGTTAAAGAGCTCCATCACCCAAAAAGGATTGAGGGCCTACCTTCAACTGAACAGCTAATGCATAATCTCAGAAACTGTGAGTCAAAATTCCCTGGAATAACTCCACTTTATCCCCAATCTCCTTGCCACCTAGACCAAGGTCCATTCACCACCCTGTCCCCAGCACTGACTGCACTGCTGTGGCCACACTAAAGCTTGGCTCAAGACGGAGGAGGAGTGAGGAAGCTGCTGCACCAATATGGCTGGTTGAGGCCGCCCAAGGTCCTAGAAGGAGGAAGTGGGTAAATGCCATATCCAAAAAGATACAGAAGCCTCAGGTTTTATCGGGGGCAGCAGCTTCCTTCTCCTTCCCCGACCTGTGGCCAAGTCACAAAGCACCACAGCTGTACAGCCAGATGGGGGAAGGGAGGAGATTAGAACTGTAGGCTAGAGTAGACAAGTATGGACCAGTTCACAATCACGCTATCCCAAGCAGAAAGTGATGGTGGCTTGGACTAGCACGGTGGTAGTAGAGATGGGGTAAAGATTCAAGAGACATCATTGATAGGCAGAACCAATAGGACATGGTAATAAACTATTCTCAGGAAAGGGGAGGAGTCATGGCTTTCAGCCATGAGCATCCACCCTCTGGGTGGCCTCACCCACTTCCTGGCAATTCTAGCCACCATGAGTCCAGGGGCTATAGCCCTTTGCTCTGCCCGTTGCTCAGCAAGTTACTTGGGGTTCCAGTTTGATAAGAAAAGACTTCCTGTGGAGGAATCTGAAGGGAAGGAGGAGGAGCTGGCCC",
    "TGGGAGGCAAAGATGGTGGCAGGTGGGTGGGAAAATGTGGGGTTTGGGGGTCACAGGAGAGACCAAGGGGCAGGCCTGGAGCATGGCACGCTCCCTGATCACAGCTCTCCACTGGAAGGCCATGGAGGGAGTGATGGGGAGAGCCTGCAACTCCTGGAGATAAGCCTGATTCTGACTTTCTTTGAAGGATTTTTTTCTTTCGACTTCTTTCCTGTGAAAGAGAATATCCGAGAAATGAGAATTTTAACTAAAGAGAAAACCTTTGCATTTGCTACTGATAAATATCTGGCCTATGCGGGAAAGTCATGGGTGCCCTGGGATTCTGGCTCCACTGCTAACAAGACCTTGTTAGACCTTCTTAACTGCCCCTCCAGAGAGGAGAAAGGCTCTTGGAGGTAGAGTGAGATTGGGGAGCTTGGCAGAGCCCTAGGATGAACTGTGTTTTTGTTTTGTTTTGTTGCAGGTTGGAGCCTTTTTCCTGCAGAAAGAGAAGCAATTCCGGGCTTTTCCACAGATAACCTGCTAGGGCTCGCAGAGACCTGGATTCTAACCCCATCTCGCCTTTCCTCACCTGGGGCATTGTTTTCTGCGTTTGAGAACTGCTGGGTGGGCTGGTGTTACCCAGGATTTTTAAATTTTTGCAGGAGACGCTTTGCAGGAGATCTCTAGGGCTTTTTTCTGTGTCAATTAAAGAGCCTGGCCAGCTGGACCTGGGCTGTCTTTTTGACAAAAACAAACGTCATCCCCCTCCCAGCTGAGCACTTGTTAGAACTGGACTTTAACTGAGGGCCTGAACCCCCTAACAACGGGACAAACAGTATGAAATCAAAACCGTTTACCCTCCTCCCACCAGCGGTTTGCGTAGGGCCTTGGGTGCACTAGCAAAACAAACTTATTTTGAACACTCAGCTCCTAGCGTGCGGCGCTGCCAATCATTAACCTCCTGGTGCAAGTGGCGCGGCCTGTGCCCTTTATAAGGTGCGCGCTGTGTCCAGCGAGC",
    "TTACAACAATCCATGCATACTTTTTTTAAATTTTCTTTTTAGACTCATATTTAGTTTGCTTCAAAAACTAATTGCTCTACTTTATGCAAACACATTATTTTAATATATATTTTGTTGAAAAGATAGTATCCAGATGGTATGCAAGGCTTAGACTCTGACAATTTCAGAGTCAAATTGGGGTCAATAATAATTAAGCAATATTAGCTCATATAATTCTTTTAGTGATTTTATAGGTAGTATTTTGCCCACAATTTCTCAGGTAAGCATAGTACAGCCAGCATTTATATCCAAATTTATTATATCAAATCCATTGCTTTTAAACATTATGCTAGCTTAAACCAGTAGTGTAATTAATTTTATACATTTTACTACATGAAATGAGAAGGTTTACAATATGATTTTTTATAATTCAATGAGTGCTATCTGTGGTAAATAAATAGATAAAAATGTTGATTTTATCTCTAAATTACTGATCTGGGCACCTCTATTTTATGTTTTATACTTAAGGATTTGGTCACTTTTTCAACCTTAAGATCAAAGACAAGATACAGGGAATAATTTTTATTTAATCATTACTTTTTATAAAATATTATCTTCTAATTGTTATATCCTGAAAATTTTTCACAGATTCTGTCTTTCAAATATGTTTCTACTCTCCAGTGAGGATCTAAATTGCACACAATGGACAAAATAGTTATTATAACAAAATCCAAATATAAAATAAATATAATTTTGAAAAGAGAAAAAATAGAAAGAACTACTTTTATGTTCTTAAGATATTAATAGTTCACAGCTTTGAGAAATCAAAGAGTATCTGACAGTACAATTACTAATTAACTTAGATTCCCAGAGAGAAACATTTATGTAAACTACTTTCAGGGTTAAGGCTTTTAACAATTGTATGTTGAGCAGAAGATTATTAAACACTGATAGGCTGGTAAGGGTGCAATAAAACTTTATGAGTAGGTCAATATATACCTAAGCAGCTTTCCTTGATCAT"
]

# input_motif_length = 10
# input_hamming_distance = 1
# motif_characters = ["A", "C", "G", "T"]
# all_created_motifs = []

function generate_random_potential_motif(input_motif_length, motif_characters)
    potential_motif = ""
    for i in 1:input_motif_length
        potential_motif *= rand(motif_characters)
    end
    return potential_motif
end

function generate_adjecent_motif(motif, motif_characters, all_created_motifs)
    this_motif_characters = split(motif, "")
    random_index = rand([i for i in 1:length(motif)])
    random_char = rand(motif_characters)
    while motif[random_index] == random_char
        random_char = rand(motif_characters)
    end
    this_motif_characters[random_index] = random_char
    generated_motif = join(this_motif_characters)
    if generated_motif in all_created_motifs
        return generate_adjecent_motif(motif, motif_characters, all_created_motifs)
    end
    return generated_motif
end


function get_nth_substrings(len, str)
    substrings = []
    for limit in 1:length(input_strings[1]) - len
        push!(substrings, str[limit:limit + len])
    end
    return substrings
end

function calculate_hamming_distance(substring, motif)
    error = 0
    for i in 1:length(motif)
        if substring[i] != motif[i]
            error += 1
        end
    end
    return error
end

function is_motif_valid(motif, goal=input_hamming_distance, length=input_motif_length)
    valid = true
    for string in input_strings
        if validate_by_hamming_distance(string, motif, goal, length) == false
            valid = false
        end
    end
    return valid
end

function validate_by_hamming_distance(string, motif, goal, len)
    motif_len = length(motif)
    string_motifs = get_nth_substrings(motif_len, string)
    valid = false
    for smotif in string_motifs
        if valid != true
            error = 0
            for i in 1:motif_len
                if smotif[i] != motif[i]
                    error += 1
                end
            end
            if error <= goal
                valid = true
                break
            end
        end
    end
    return valid
end